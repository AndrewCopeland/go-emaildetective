/*
api.emaildetective.io API

EmailDetective.io is an API focusing on validating email addresses and providing a score based off how suspicious an email address is.  To get started register a new user (make sure to verify your email) and then you can can start getting email information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emaildetective

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EmailInfoAPIService EmailInfoAPI service
type EmailInfoAPIService service

type ApiGetBulkEmailAddressInfoRequest struct {
	ctx context.Context
	ApiService *EmailInfoAPIService
	bulkEmailInfoRequest *BulkEmailInfoRequest
}

// Request of the email addresses to get info about
func (r ApiGetBulkEmailAddressInfoRequest) BulkEmailInfoRequest(bulkEmailInfoRequest BulkEmailInfoRequest) ApiGetBulkEmailAddressInfoRequest {
	r.bulkEmailInfoRequest = &bulkEmailInfoRequest
	return r
}

func (r ApiGetBulkEmailAddressInfoRequest) Execute() (*BulkEmailInfoResponse, *http.Response, error) {
	return r.ApiService.GetBulkEmailAddressInfoExecute(r)
}

/*
GetBulkEmailAddressInfo Get information and legitimacy score for many email address

Get information about many email address.

- `email`: The email address being validated. Example: `"user123@example.com"`.
- `user`: The user portion of the email address, which is everything before the "@" symbol. Example: `"user123"`.
- `domain`: The domain portion of the email address, which is everything after the "@" symbol. Example: `"example.com"`.
- `valid_email`: Indicates whether the email address format is valid. Example: `true`.
- `valid_spf`: Indicates whether the email domain has a valid SPF (Sender Policy Framework) record. Example: `true`.
- `valid_dmarc`: Indicates whether the email domain has a valid DMARC (Domain-based Message Authentication, Reporting & Conformance) record. Example: `true`.
- `valid_mx`: Indicates whether the email domain has valid MX (Mail Exchange) records. Example: `true`.
- `valid_tld`: If the TLD (Top Level Domain) specified in the email is valid. A TLD is .com, .org, .net, etc
- `nonsense`: Flags whether the email is nonsensical or randomly generated. Example: `false`.
- `role`: Indicates whether the email address is associated with a role (e.g., `admin@example.com`). Example: `false`.
- `free`: Indicates whether the email is from a free email provider (e.g., Gmail, Yahoo). Example: `true`.
- `disposable`: Indicates whether the email address is from a disposable email service. Example: `false`.
- `score`: The total score of the email address. The lower the score the more likely the email address is suspicious or not valid. This is is an integer between 0 and 100. An example of a suspicous score would be 35, an example of a non-suspicous score would be 85.
- `suspicion_rating`: The rating of the email address. Valid value are HIGH, MEDIUM, LOW.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBulkEmailAddressInfoRequest
*/
func (a *EmailInfoAPIService) GetBulkEmailAddressInfo(ctx context.Context) ApiGetBulkEmailAddressInfoRequest {
	return ApiGetBulkEmailAddressInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BulkEmailInfoResponse
func (a *EmailInfoAPIService) GetBulkEmailAddressInfoExecute(r ApiGetBulkEmailAddressInfoRequest) (*BulkEmailInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkEmailInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailInfoAPIService.GetBulkEmailAddressInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/emails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkEmailInfoRequest == nil {
		return localVarReturnValue, nil, reportError("bulkEmailInfoRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bulkEmailInfoRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Model429ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Model500ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEmailAddressInfoRequest struct {
	ctx context.Context
	ApiService *EmailInfoAPIService
	emailAddress string
}

func (r ApiGetEmailAddressInfoRequest) Execute() (*EmailInfoResponse, *http.Response, error) {
	return r.ApiService.GetEmailAddressInfoExecute(r)
}

/*
GetEmailAddressInfo Get information and legitimacy score for an email address

Get information about an email address.

- `email`: The email address being validated. Example: `"user123@example.com"`.
- `user`: The user portion of the email address, which is everything before the "@" symbol. Example: `"user123"`.
- `domain`: The domain portion of the email address, which is everything after the "@" symbol. Example: `"example.com"`.
- `valid_email`: Indicates whether the email address format is valid. Example: `true`.
- `valid_spf`: Indicates whether the email domain has a valid SPF (Sender Policy Framework) record. Example: `true`.
- `valid_dmarc`: Indicates whether the email domain has a valid DMARC (Domain-based Message Authentication, Reporting & Conformance) record. Example: `true`.
- `valid_mx`: Indicates whether the email domain has valid MX (Mail Exchange) records. Example: `true`.
- `valid_tld`: If the TLD (Top Level Domain) specified in the email is valid. A TLD is .com, .org, .net, etc
- `nonsense`: Flags whether the email is nonsensical or randomly generated. Example: `false`.
- `role`: Indicates whether the email address is associated with a role (e.g., `admin@example.com`). Example: `false`.
- `free`: Indicates whether the email is from a free email provider (e.g., Gmail, Yahoo). Example: `true`.
- `disposable`: Indicates whether the email address is from a disposable email service. Example: `false`.
- `score`: The total score of the email address. The lower the score the more likely the email address is suspicious or not valid. This is is an integer between 0 and 100. An example of a suspicous score would be 35, an example of a non-suspicous score would be 85.
- `suspicion_rating`: The rating of the email address. Valid value are HIGH, MEDIUM, LOW.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailAddress email address
 @return ApiGetEmailAddressInfoRequest
*/
func (a *EmailInfoAPIService) GetEmailAddressInfo(ctx context.Context, emailAddress string) ApiGetEmailAddressInfoRequest {
	return ApiGetEmailAddressInfoRequest{
		ApiService: a,
		ctx: ctx,
		emailAddress: emailAddress,
	}
}

// Execute executes the request
//  @return EmailInfoResponse
func (a *EmailInfoAPIService) GetEmailAddressInfoExecute(r ApiGetEmailAddressInfoRequest) (*EmailInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailInfoAPIService.GetEmailAddressInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/emails/{emailAddress}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailAddress"+"}", url.PathEscape(parameterValueToString(r.emailAddress, "emailAddress")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Model429ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Model500ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEmailCSVRequest struct {
	ctx context.Context
	ApiService *EmailInfoAPIService
	body *string
}

// Request of the email addresses to get info about
func (r ApiGetEmailCSVRequest) Body(body string) ApiGetEmailCSVRequest {
	r.body = &body
	return r
}

func (r ApiGetEmailCSVRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEmailCSVExecute(r)
}

/*
GetEmailCSV Get information and legitimacy score for many email addresses and return via CSV

**The provided file must have one email per line, currently CSV and plain text are the only supported file types**

Get information about many email address.

- `email`: The email address being validated. Example: `"user123@example.com"`.
- `user`: The user portion of the email address, which is everything before the "@" symbol. Example: `"user123"`.
- `domain`: The domain portion of the email address, which is everything after the "@" symbol. Example: `"example.com"`.
- `valid_email`: Indicates whether the email address format is valid. Example: `true`.
- `valid_spf`: Indicates whether the email domain has a valid SPF (Sender Policy Framework) record. Example: `true`.
- `valid_dmarc`: Indicates whether the email domain has a valid DMARC (Domain-based Message Authentication, Reporting & Conformance) record. Example: `true`.
- `valid_mx`: Indicates whether the email domain has valid MX (Mail Exchange) records. Example: `true`.
- `valid_tld`: If the TLD (Top Level Domain) specified in the email is valid. A TLD is .com, .org, .net, etc
- `nonsense`: Flags whether the email is nonsensical or randomly generated. Example: `false`.
- `role`: Indicates whether the email address is associated with a role (e.g., `admin@example.com`). Example: `false`.
- `free`: Indicates whether the email is from a free email provider (e.g., Gmail, Yahoo). Example: `true`.
- `disposable`: Indicates whether the email address is from a disposable email service. Example: `false`.
- `score`: The total score of the email address. The lower the score the more likely the email address is suspicious or not valid. This is is an integer between 0 and 100. An example of a suspicous score would be 35, an example of a non-suspicous score would be 85.
- `suspicion_rating`: The rating of the email address. Valid value are HIGH, MEDIUM, LOW.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetEmailCSVRequest
*/
func (a *EmailInfoAPIService) GetEmailCSV(ctx context.Context) ApiGetEmailCSVRequest {
	return ApiGetEmailCSVRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *EmailInfoAPIService) GetEmailCSVExecute(r ApiGetEmailCSVRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailInfoAPIService.GetEmailCSV")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/emails/csv"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Model400ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Model401ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v Model429ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Model500ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
