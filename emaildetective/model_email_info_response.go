/*
api.emaildetective.io API

EmailDetective.io is an API focusing on validating email addresses and providing a score based off how suspicious an email address is.  To get started register a new user (make sure to verify your email) and then you can can start getting email information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emaildetective

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailInfoResponse{}

// EmailInfoResponse struct for EmailInfoResponse
type EmailInfoResponse struct {
	Email string `json:"email"`
	User string `json:"user"`
	Domain string `json:"domain"`
	ValidEmail bool `json:"valid_email"`
	ValidSpf bool `json:"valid_spf"`
	ValidDmarc bool `json:"valid_dmarc"`
	ValidMx bool `json:"valid_mx"`
	ValidTld bool `json:"valid_tld"`
	Nonsense bool `json:"nonsense"`
	Role bool `json:"role"`
	Free bool `json:"free"`
	Disposable bool `json:"disposable"`
	Score int32 `json:"score"`
	SuspicionRating string `json:"suspicion_rating"`
}

type _EmailInfoResponse EmailInfoResponse

// NewEmailInfoResponse instantiates a new EmailInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailInfoResponse(email string, user string, domain string, validEmail bool, validSpf bool, validDmarc bool, validMx bool, validTld bool, nonsense bool, role bool, free bool, disposable bool, score int32, suspicionRating string) *EmailInfoResponse {
	this := EmailInfoResponse{}
	this.Email = email
	this.User = user
	this.Domain = domain
	this.ValidEmail = validEmail
	this.ValidSpf = validSpf
	this.ValidDmarc = validDmarc
	this.ValidMx = validMx
	this.ValidTld = validTld
	this.Nonsense = nonsense
	this.Role = role
	this.Free = free
	this.Disposable = disposable
	this.Score = score
	this.SuspicionRating = suspicionRating
	return &this
}

// NewEmailInfoResponseWithDefaults instantiates a new EmailInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailInfoResponseWithDefaults() *EmailInfoResponse {
	this := EmailInfoResponse{}
	return &this
}

// GetEmail returns the Email field value
func (o *EmailInfoResponse) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *EmailInfoResponse) SetEmail(v string) {
	o.Email = v
}

// GetUser returns the User field value
func (o *EmailInfoResponse) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *EmailInfoResponse) SetUser(v string) {
	o.User = v
}

// GetDomain returns the Domain field value
func (o *EmailInfoResponse) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *EmailInfoResponse) SetDomain(v string) {
	o.Domain = v
}

// GetValidEmail returns the ValidEmail field value
func (o *EmailInfoResponse) GetValidEmail() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ValidEmail
}

// GetValidEmailOk returns a tuple with the ValidEmail field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetValidEmailOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidEmail, true
}

// SetValidEmail sets field value
func (o *EmailInfoResponse) SetValidEmail(v bool) {
	o.ValidEmail = v
}

// GetValidSpf returns the ValidSpf field value
func (o *EmailInfoResponse) GetValidSpf() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ValidSpf
}

// GetValidSpfOk returns a tuple with the ValidSpf field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetValidSpfOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidSpf, true
}

// SetValidSpf sets field value
func (o *EmailInfoResponse) SetValidSpf(v bool) {
	o.ValidSpf = v
}

// GetValidDmarc returns the ValidDmarc field value
func (o *EmailInfoResponse) GetValidDmarc() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ValidDmarc
}

// GetValidDmarcOk returns a tuple with the ValidDmarc field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetValidDmarcOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidDmarc, true
}

// SetValidDmarc sets field value
func (o *EmailInfoResponse) SetValidDmarc(v bool) {
	o.ValidDmarc = v
}

// GetValidMx returns the ValidMx field value
func (o *EmailInfoResponse) GetValidMx() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ValidMx
}

// GetValidMxOk returns a tuple with the ValidMx field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetValidMxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidMx, true
}

// SetValidMx sets field value
func (o *EmailInfoResponse) SetValidMx(v bool) {
	o.ValidMx = v
}

// GetValidTld returns the ValidTld field value
func (o *EmailInfoResponse) GetValidTld() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ValidTld
}

// GetValidTldOk returns a tuple with the ValidTld field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetValidTldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValidTld, true
}

// SetValidTld sets field value
func (o *EmailInfoResponse) SetValidTld(v bool) {
	o.ValidTld = v
}

// GetNonsense returns the Nonsense field value
func (o *EmailInfoResponse) GetNonsense() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Nonsense
}

// GetNonsenseOk returns a tuple with the Nonsense field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetNonsenseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nonsense, true
}

// SetNonsense sets field value
func (o *EmailInfoResponse) SetNonsense(v bool) {
	o.Nonsense = v
}

// GetRole returns the Role field value
func (o *EmailInfoResponse) GetRole() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetRoleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *EmailInfoResponse) SetRole(v bool) {
	o.Role = v
}

// GetFree returns the Free field value
func (o *EmailInfoResponse) GetFree() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Free
}

// GetFreeOk returns a tuple with the Free field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Free, true
}

// SetFree sets field value
func (o *EmailInfoResponse) SetFree(v bool) {
	o.Free = v
}

// GetDisposable returns the Disposable field value
func (o *EmailInfoResponse) GetDisposable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disposable
}

// GetDisposableOk returns a tuple with the Disposable field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetDisposableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disposable, true
}

// SetDisposable sets field value
func (o *EmailInfoResponse) SetDisposable(v bool) {
	o.Disposable = v
}

// GetScore returns the Score field value
func (o *EmailInfoResponse) GetScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *EmailInfoResponse) SetScore(v int32) {
	o.Score = v
}

// GetSuspicionRating returns the SuspicionRating field value
func (o *EmailInfoResponse) GetSuspicionRating() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuspicionRating
}

// GetSuspicionRatingOk returns a tuple with the SuspicionRating field value
// and a boolean to check if the value has been set.
func (o *EmailInfoResponse) GetSuspicionRatingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuspicionRating, true
}

// SetSuspicionRating sets field value
func (o *EmailInfoResponse) SetSuspicionRating(v string) {
	o.SuspicionRating = v
}

func (o EmailInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["user"] = o.User
	toSerialize["domain"] = o.Domain
	toSerialize["valid_email"] = o.ValidEmail
	toSerialize["valid_spf"] = o.ValidSpf
	toSerialize["valid_dmarc"] = o.ValidDmarc
	toSerialize["valid_mx"] = o.ValidMx
	toSerialize["valid_tld"] = o.ValidTld
	toSerialize["nonsense"] = o.Nonsense
	toSerialize["role"] = o.Role
	toSerialize["free"] = o.Free
	toSerialize["disposable"] = o.Disposable
	toSerialize["score"] = o.Score
	toSerialize["suspicion_rating"] = o.SuspicionRating
	return toSerialize, nil
}

func (o *EmailInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"user",
		"domain",
		"valid_email",
		"valid_spf",
		"valid_dmarc",
		"valid_mx",
		"valid_tld",
		"nonsense",
		"role",
		"free",
		"disposable",
		"score",
		"suspicion_rating",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailInfoResponse := _EmailInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailInfoResponse)

	if err != nil {
		return err
	}

	*o = EmailInfoResponse(varEmailInfoResponse)

	return err
}

type NullableEmailInfoResponse struct {
	value *EmailInfoResponse
	isSet bool
}

func (v NullableEmailInfoResponse) Get() *EmailInfoResponse {
	return v.value
}

func (v *NullableEmailInfoResponse) Set(val *EmailInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailInfoResponse(val *EmailInfoResponse) *NullableEmailInfoResponse {
	return &NullableEmailInfoResponse{value: val, isSet: true}
}

func (v NullableEmailInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


